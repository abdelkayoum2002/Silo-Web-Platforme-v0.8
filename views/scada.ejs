<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Grain Silo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            max-width: 500px;
            width: 100%;
            text-align: center;
        }

        .header {
            margin-bottom: 40px;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 16px;
        }

        .header p {
            font-size: 1.1rem;
            color: #6b7280;
        }

        .silo-container {
            background: #f9fafb;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .help-text {
            margin-top: 20px;
            font-size: 0.875rem;
            color: #6b7280;
            line-height: 1.6;
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: left;
        }

        .help-text code {
            background: #f3f4f6;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.8rem;
        }

        .sensor-clickable {
            cursor: pointer;
        }

        .sensor-clickable:hover {
            filter: brightness(1.2);
        }
        .SiloSenosrsTooltip {
            position: absolute;
            background: rgb(223 221 103 / 85%);
            color: #1f2937;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 14px;
            pointer-events: none;
            display: none;
            z-index: 1000;
            white-space: nowrap;
        }

    </style>
</head>
<body>
    <div id="sensorTooltip" class="SiloSenosrsTooltip"></div>
    <div class="container">
        <div class="header">
            <h1>Simple Grain Silo</h1>
            <p>Control via JavaScript commands in console</p>
        </div>

        <div class="silo-container">
            <svg id="Silo_1_siloSvg" data-matrixRows="1" data-matrixCols="1"  width="400" height="400" viewBox="90 11 232 384">
                <!-- Background -->
                <rect x="90" y="11" width="232" height="384" fill="#f8fafc" />
                
                <!-- Gradients and Effects -->
                <defs>
                    <linearGradient id="grainGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" stop-color="#f6ad55" />
                        <stop offset="50%" stop-color="#ed8936" />
                        <stop offset="100%" stop-color="#dd6b20" />
                    </linearGradient>
                    <linearGradient id="roofGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" stop-color="#e2e8f0" />
                        <stop offset="50%" stop-color="#cbd5e0" />
                        <stop offset="100%" stop-color="#a0aec0" />
                    </linearGradient>
                    
                    <!-- Red glow filter for active sensors -->
                    <filter id="redGlow" x="-50%" y="-50%" width="200%" height="200%">
                        <feGaussianBlur stdDeviation="4" result="coloredBlur"/>
                        <feMerge> 
                            <feMergeNode in="coloredBlur"/>
                            <feMergeNode in="SourceGraphic"/>
                        </feMerge>
                    </filter>
                </defs>
                
                <!-- Silo base/foundation -->
                <ellipse cx="200" cy="380" rx="110" ry="15" fill="#4a5568" />
                <ellipse cx="200" cy="375" rx="110" ry="15" fill="#718096" />
                
                <!-- Main silo cylinder - back wall -->
                <rect x="90" y="80" width="220" height="295" fill="#e2e8f0" />
                
                <!-- Back wall texture - corrugated lines -->
                <g id="backWallTexture">
                    <line x1="95" y1="80" x2="95" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="105" y1="80" x2="105" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="115" y1="80" x2="115" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="125" y1="80" x2="125" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="135" y1="80" x2="135" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="145" y1="80" x2="145" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="155" y1="80" x2="155" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="165" y1="80" x2="165" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="175" y1="80" x2="175" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="185" y1="80" x2="185" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="195" y1="80" x2="195" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="205" y1="80" x2="205" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="215" y1="80" x2="215" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="225" y1="80" x2="225" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="235" y1="80" x2="235" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="245" y1="80" x2="245" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="255" y1="80" x2="255" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="265" y1="80" x2="265" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="275" y1="80" x2="275" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                    <line x1="285" y1="80" x2="285" y2="375" stroke="#cbd5e0" stroke-width="1"/>
                </g>
                
                <!-- Cross-section opening - the cut-away view -->
                <path d="M 120 100 L 280 100 L 280 360 L 120 360 Z" fill="#1a202c" opacity="0.1" />
                
                <!-- Grain inside the silo -->
                <rect id="Silo_1_grainLevel" x="125" y="305" width="150" height="60" fill="url(#grainGradient)" />
                
                <!-- Grain texture - small particles -->
                <g id="Silo_1_grainTexture">
                    <g><circle cx="130" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="144" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="158" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="172" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="186" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="200" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="214" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="228" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="242" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="256" cy="362" r="1.5" fill="#f6ad55" opacity="0.7"/></g>
                    <g><circle cx="137" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="151" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="165" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="179" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="193" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="207" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="221" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="235" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="249" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="263" cy="358" r="1.5" fill="#f6ad55" opacity="0.7"/></g>
                    <g><circle cx="130" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="144" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="158" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="172" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="186" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="200" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="214" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="228" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="242" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/><circle cx="256" cy="354" r="1.5" fill="#f6ad55" opacity="0.7"/></g>
                </g>

                <!-- Sensor support cables/lines -->
                <g id="Silo_1_sensorLines"></g>

                <!-- Sensor dots -->
                <g id="Silo_1_sensorDots"></g>
                
                <!-- Front silo walls - partial transparency to show inside -->
                <rect x="90" y="80" width="30" height="295" fill="#e2e8f0" opacity="0.9" />
                <rect x="280" y="80" width="30" height="295" fill="#e2e8f0" opacity="0.9" />
                
                <!-- Front wall corrugation -->
                <g id="frontWallTexture">
                    <line x1="95" y1="80" x2="95" y2="375" stroke="#cbd5e0" stroke-width="0.8"/>
                    <line x1="103" y1="80" x2="103" y2="375" stroke="#cbd5e0" stroke-width="0.8"/>
                    <line x1="111" y1="80" x2="111" y2="375" stroke="#cbd5e0" stroke-width="0.8"/>
                    <line x1="285" y1="80" x2="285" y2="375" stroke="#cbd5e0" stroke-width="0.8"/>
                    <line x1="293" y1="80" x2="293" y2="375" stroke="#cbd5e0" stroke-width="0.8"/>
                    <line x1="301" y1="80" x2="301" y2="375" stroke="#cbd5e0" stroke-width="0.8"/>
                </g>
                
                <!-- Conical roof -->
                <path d="M 90 80 L 200 20 L 310 80 Z" fill="url(#roofGradient)" />
                
                <!-- Roof texture lines -->
                <g id="roofTexture">
                    <line x1="200" y1="20" x2="105" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="119" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="133" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="147" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="161" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="175" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="189" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="211" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="225" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="239" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="253" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="267" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="281" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                    <line x1="200" y1="20" x2="295" y2="80" stroke="#a0aec0" stroke-width="0.5" opacity="0.6"/>
                </g>
                
                <!-- Ventilation cap on top -->
                <ellipse cx="200" cy="15" rx="8" ry="4" fill="#4a5568" />
                <rect x="196" y="10" width="8" height="10" fill="#4a5568" />
                
                <!-- Access ladder -->
                <rect x="315" y="100" width="4" height="250" fill="#4a5568" />
                <g id="ladderRungs">
                    <rect x="312" y="110" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="126" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="142" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="158" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="174" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="190" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="206" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="222" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="238" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="254" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="270" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="286" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="302" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="318" width="10" height="2" fill="#4a5568"/>
                    <rect x="312" y="334" width="10" height="2" fill="#4a5568"/>
                </g>
                
                <!-- Door at bottom -->
                <rect x="125" y="330" width="25" height="35" fill="#2d3748" rx="2" />
                <circle cx="145" cy="347" r="1.5" fill="#e2e8f0" />
                
                <!-- Grain discharge outlet -->
                <rect x="195" y="365" width="10" height="15" fill="#2d3748" />
            </svg>
        </div>

        <div class="help-text">
            <strong>JavaScript Commands:</strong><br>
            <code>setLevel(50)</code> - Set grain level (0-85)<br>
            <code>setMatrix(3, 3)</code> - Set sensor matrix (rows, cols)<br>
            <code>toggleSensor(0, 0)</code> - Toggle sensor at position<br>
            <code>setSensors([[0,0], [1,1]], true)</code> - Set multiple sensors<br>
            <code>clearAll()</code> - Clear all active sensors<br>
            <code>demo()</code> - Random sensor demo<br>
            <code>help()</code> - Show all commands
        </div>
    </div>

    <script>
        // State management
        let grainLevel = 80;
        let activeSensors = new Set();
        let sensorPositions = [];

        // Calculate sensor positions
        function calculateSensorPositions(siloId) {
            const silo = document.getElementById(`${siloId}_siloSvg`);
            const matrixRows = Number(silo.dataset.matrixrows);
            const matrixCols = Number(silo.dataset.matrixcols);
            const positions = [];
            
            // Cross-section boundaries with padding
            const usableLeft = 155;
            const usableRight = 245;
            const usableTop = 140;
            const usableBottom = 320;
            
            const usableWidth = usableRight - usableLeft;
            const usableHeight = usableBottom - usableTop;
            
            for (let row = 0; row < matrixRows; row++) {
                for (let col = 0; col < matrixCols; col++) {
                    let x, y;
                    
                    if (matrixCols === 1) {
                        x = usableLeft + usableWidth / 2;
                    } else {
                        x = usableLeft + (col * usableWidth) / (matrixCols - 1);
                    }
                    
                    if (matrixRows === 1) {
                        y = usableTop + usableHeight / 2;
                    } else {
                        y = usableTop + (row * usableHeight) / (matrixRows - 1);
                    }
                    
                    positions.push({ x, y, row, col });
                }
            }
            
            return positions;
        }

        // Update grain level display
        function updateGrainLevel(siloId,grainLevel) {
            const siloHeight = 300;
            const grainHeight = (grainLevel / 100) * (siloHeight - 60);
            
            const grainRect = document.getElementById(`${siloId}_grainLevel`);
            grainRect.setAttribute('y', 365 - grainHeight);
            grainRect.setAttribute('height', grainHeight);
            
            // Update grain texture
            const grainTexture = document.getElementById(`${siloId}_grainTexture`);
            grainTexture.innerHTML = '';
            
            const particleRows = Math.floor(grainHeight / 4);
            for (let i = 0; i < particleRows; i++) {
                const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
                for (let j = 0; j < 10; j++) {
                    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                    circle.setAttribute('cx', 130 + j * 14 + (i % 2) * 7);
                    circle.setAttribute('cy', 362 - i * 4);
                    circle.setAttribute('r', '1.5');
                    circle.setAttribute('fill', '#f6ad55');
                    circle.setAttribute('opacity', '0.7');
                    g.appendChild(circle);
                }
                grainTexture.appendChild(g);
            }
        }

        // Update sensor display
        function updateSensors(siloId) {
            const silo = document.getElementById(`${siloId}_siloSvg`);
            const tooltipDiv = document.getElementById('sensorTooltip');
            const container = document.getElementsByClassName('silo-container')[0]
            console.log(container)

            
            // Update sensor dots
            
            sensorPositions.forEach((position) => {
                const sensorKey = `${position.row}-${position.col}`;
                const isActive = activeSensors.has(sensorKey);
                
                const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
                
                // Outer glow for active sensors
                if (isActive) {
                    const outerGlow = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                    outerGlow.setAttribute('cx', position.x);
                    outerGlow.setAttribute('cy', position.y);
                    outerGlow.setAttribute('r', '12');
                    outerGlow.setAttribute('fill', 'none');
                    outerGlow.setAttribute('stroke', '#ef4444');
                    outerGlow.setAttribute('stroke-width', '2');
                    outerGlow.setAttribute('opacity', '0.6');
                    outerGlow.setAttribute('filter', 'url(#redGlow)');
                    g.appendChild(outerGlow);
                }
                
                // Main sensor dot
                const mainDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                mainDot.setAttribute('cx', position.x);
                mainDot.setAttribute('cy', position.y);
                mainDot.setAttribute('r', '4');
                mainDot.setAttribute('fill', isActive ? '#dc2626' : '#10b981');
                mainDot.setAttribute('stroke', '#ffffff');
                mainDot.setAttribute('stroke-width', '1');
                mainDot.setAttribute('class', 'sensor-clickable');
                if (isActive) {
                    mainDot.setAttribute('filter', 'url(#redGlow)');
                }
                const tooltipDiv = document.getElementById("sensorTooltip");
                mainDot.addEventListener("click", () => {
                    // Toggle tooltip
                    if (tooltipDiv.style.display === "block" && tooltipDiv.dataset.anchor === sensorKey) {
                        tooltipDiv.style.display = "none";
                        tooltipDiv.dataset.anchor = "";
                        return;
                    }

                    tooltipDiv.style.display = "block";
                    tooltipDiv.dataset.anchor = sensorKey; // remember which sensor opened it
                    tooltipDiv.textContent = `Sensor: ${sensorKey} jeiozruezorenqfsdiofsdhfsfoisdfmssihsf`;

                    function updateTooltipPosition() {
                        const containerRect = container.getBoundingClientRect();
                        const dotRect = mainDot.getBoundingClientRect();
                        const tooltipRect = tooltipDiv.getBoundingClientRect();

                        // Anchor tooltip near the dot
                        let left = dotRect.right + 8;
                        let top = dotRect.top + (dotRect.height / 2) - (tooltipRect.height / 2);

                        // Constrain horizontally
                        if (left + tooltipRect.width > containerRect.right) {
                            left = dotRect.left - tooltipRect.width - 8;
                        }
                        if (left < containerRect.left) {
                            left = containerRect.left + 5;
                        }

                        // Constrain vertically
                        if (top + tooltipRect.height > containerRect.bottom) {
                            top = containerRect.bottom - tooltipRect.height - 5;
                        }
                        if (top < containerRect.top) {
                            top = containerRect.top + 5;
                        }

                        tooltipDiv.style.left = left + "px";
                        tooltipDiv.style.top = top + "px";
                    }

                    // Position initially
                    updateTooltipPosition();

                    // Keep following if window changes
                    window.addEventListener("scroll", updateTooltipPosition, { passive: true });
                    window.addEventListener("resize", updateTooltipPosition);
                });


                g.appendChild(mainDot);
                
                // Pulsing animation for active sensors
                if (isActive) {
                    const pulsingDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                    pulsingDot.setAttribute('cx', position.x);
                    pulsingDot.setAttribute('cy', position.y);
                    pulsingDot.setAttribute('r', '4');
                    pulsingDot.setAttribute('fill', '#dc2626');
                    pulsingDot.setAttribute('opacity', '0.8');
                    
                    const animateR = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
                    animateR.setAttribute('attributeName', 'r');
                    animateR.setAttribute('values', '4;8;4');
                    animateR.setAttribute('dur', '1.5s');
                    animateR.setAttribute('repeatCount', 'indefinite');
                    pulsingDot.appendChild(animateR);
                    
                    const animateOpacity = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
                    animateOpacity.setAttribute('attributeName', 'opacity');
                    animateOpacity.setAttribute('values', '0.8;0.2;0.8');
                    animateOpacity.setAttribute('dur', '1.5s');
                    animateOpacity.setAttribute('repeatCount', 'indefinite');
                    pulsingDot.appendChild(animateOpacity);
                    
                    g.appendChild(pulsingDot);
                }
                
                sensorDots.appendChild(g);
            });
        }

        // Global API functions
       /* window.setLevel = function(level,siloId) {
            grainLevel = Math.max(0, Math.min(85, level));
            updateGrainLevel(siloId);
            console.log(`Grain level set to ${grainLevel}%`);
        };*/

        function setMatrix(rows, cols ,siloId ,sensors) {
            const silo = document.getElementById(`${siloId}_siloSvg`);
            silo.dataset.matrixrows = Math.max(1, Math.min(10, rows));
            silo.dataset.matrixcols = Math.max(1, Math.min(10, cols));
            sensorPositions = calculateSensorPositions(siloId);
            // Update sensor lines
            const sensorLines = document.getElementById(`${siloId}_sensorLines`);
            sensorLines.innerHTML = '';
            
            sensorPositions.forEach((position) => {
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', position.x);
                line.setAttribute('y1', '100');
                line.setAttribute('x2', position.x);
                line.setAttribute('y2', '360');
                line.setAttribute('stroke', '#e2e8f0');
                line.setAttribute('stroke-width', '2');
                line.setAttribute('opacity', '0.8');
                sensorLines.appendChild(line);
            });
            const sensorDots = document.getElementById(`${siloId}_sensorDots`);
            const container = document.getElementsByClassName('silo-container')[0]
            sensorDots.innerHTML = '';
            sensorPositions.forEach((position) => {
                const sensorKey = `${position.row}-${position.col}`;
                
                const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
                // Main sensor dot
                const mainDot = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                mainDot.setAttribute('cx', position.x);
                mainDot.setAttribute('cy', position.y);
                mainDot.setAttribute('r', '4');
                mainDot.setAttribute('fill','#10b981');
                mainDot.setAttribute('stroke', '#ffffff');
                mainDot.setAttribute('stroke-width', '1');
                mainDot.setAttribute('class', 'sensor-clickable');
                mainDot.dataset.sensors = JSON.stringify(sensors[sensorKey]);
                const tooltipDiv = document.getElementById("sensorTooltip");
                mainDot.addEventListener("click", () => {
                    // Toggle tooltip
                    if (tooltipDiv.style.display === "block" && tooltipDiv.dataset.anchor === sensorKey) {
                        tooltipDiv.style.display = "none";
                        tooltipDiv.dataset.anchor = "";
                        return;
                    }

                    tooltipDiv.style.display = "block";
                    tooltipDiv.dataset.anchor = sensorKey; // remember which sensor opened it
                    const sensors = JSON.parse(mainDot.dataset.sensors || "[]");

                    // Build HTML table for tooltip
                    let tooltipHTML = `
                        <strong>Position: ${sensorKey}</strong>
                        <table border="1" cellspacing="0" cellpadding="4" style="margin-top:5px; border-collapse:collapse; font-size:12px;">
                        <tr>
                            <th>Index</th>
                            <th>Name</th>
                            <th>Value</th>
                            <th>Consigne</th>
                            <th>Status</th>
                        </tr>
                    `;

                    for (const category in sensors) {
                        tooltipHTML += `<tr><td colspan="5" style="background:#eee; font-weight:bold;">${category}</td></tr>`;
                        for (const y in sensors[category]) {
                        const { name, value, consigne, status } = sensors[category][y];
                        tooltipHTML += `
                            <tr>
                            <td>${y}</td>
                            <td>${name}</td>
                            <td>${value}</td>
                            <td>${consigne}</td>
                            <td>${status}</td>
                            </tr>
                        `;
                        }
                    }

                    tooltipHTML += `</table>`;
                    tooltipDiv.innerHTML = tooltipHTML;

                    function updateTooltipPosition() {
                        const containerRect = container.getBoundingClientRect();
                        const dotRect = mainDot.getBoundingClientRect();
                        const tooltipRect = tooltipDiv.getBoundingClientRect();

                        // Anchor tooltip near the dot
                        let left = dotRect.right + 8;
                        let top = dotRect.top + (dotRect.height / 2) - (tooltipRect.height / 2);

                        // Constrain horizontally
                        if (left + tooltipRect.width > containerRect.right) {
                            left = dotRect.left - tooltipRect.width - 8;
                        }
                        if (left < containerRect.left) {
                            left = containerRect.left + 5;
                        }

                        // Constrain vertically
                        if (top + tooltipRect.height > containerRect.bottom) {
                            top = containerRect.bottom - tooltipRect.height - 5;
                        }
                        if (top < containerRect.top) {
                            top = containerRect.top + 5;
                        }

                        tooltipDiv.style.left = left + "px";
                        tooltipDiv.style.top = top + "px";
                    }

                    // Position initially
                    updateTooltipPosition();

                    // Keep following if window changes
                    window.addEventListener("scroll", updateTooltipPosition, { passive: true });
                    window.addEventListener("resize", updateTooltipPosition);
                });
                g.appendChild(mainDot);
                sensorDots.appendChild(g);
            });
            console.log(`Matrix set to ${silo.dataset.matrixRows} × ${silo.dataset.matrixCols}`);
        };

        function setSensorDot (row, col,status, siloId) {
            const silo = document.getElementById(`${siloId}_siloSvg`);
            const matrixRows = Number(silo.dataset.matrixrows);
            const matrixCols = Number(silo.dataset.matrixcols);
            if (row >= matrixRows || col >= matrixCols || row < 0 || col < 0) {
                console.log(`Invalid sensor position: (${row}, ${col})`);
                return;
            }
            
            const sensorKey = `${row}-${col}`;
            const sensorDot = document.querySelector(`#${siloId}_sensorDots .sensor-clickable[data-anchor="${sensorKey}"]`);
            console.log(`Sensor (${row}, ${col}) ${sensorDot.dataset.status}`);
        };

        function setSensors (sensorList, active = true,siloId) {
            const silo = document.getElementById(`${siloId}_siloSvg`);
            const matrixRows = Number(silo.dataset.matrixrows);
            const matrixCols = Number(silo.dataset.matrixcols);
            sensorList.forEach(([row, col]) => {
                if (row < matrixRows && col < matrixCols && row >= 0 && col >= 0) {
                    const sensorKey = `${row}-${col}`;
                    if (active) {
                        activeSensors.add(sensorKey);
                    } else {
                        activeSensors.delete(sensorKey);
                    }
                }
            });
            updateSensors(siloId);
            console.log(`${sensorList.length} sensors ${active ? 'activated' : 'deactivated'}`);
        };

        window.clearAll = function() {
            activeSensors.clear();
            updateSensors();
            console.log('All sensors cleared');
        };

        window.demo = function() {
            const randomSensors = [];
            const numSensors = Math.min(3, matrixRows * matrixCols);
            for (let i = 0; i < numSensors; i++) {
                const row = Math.floor(Math.random() * matrixRows);
                const col = Math.floor(Math.random() * matrixCols);
                randomSensors.push([row, col]);
            }
            setSensors(randomSensors, true);
        };

        window.help = function() {
            console.log(`
🌾 Grain Silo Commands:
• setLevel(0-85) - Set grain level percentage
• setMatrix(rows, cols) - Configure sensor grid
• toggleSensor(row, col) - Toggle single sensor
• setSensors([[r,c], [r,c]], true/false) - Set multiple sensors
• clearAll() - Clear all active sensors  
• demo() - Random sensor demonstration

Examples:
setLevel(75)
setMatrix(4, 2)
toggleSensor(0, 0)
setSensors([[0,0], [1,1], [2,2]], true)
            `);
        };

        // Initialize
        document.addEventListener("DOMContentLoaded", () => {
            updateGrainLevel('Silo_1',grainLevel);
            //updateSensors('Silo_1');
            console.log("🌾 Grain Silo loaded! Type 'help()' for commands.");
        });
    </script>
</body>
</html>